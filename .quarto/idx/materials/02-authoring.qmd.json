{"title":"02 - Authoring Quarto","markdown":{"yaml":{"format":{"revealjs":{"slide-number":true,"width":1600,"height":900,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[jthomasmock.github.io/quarto-r-medicine](https://jthomasmock.github.io/quarto-r-medicine/)","css":["theme/theme.css"],"theme":"simple"}},"editor":"source","execute":{"echo":true},"filters":["code-filename"]},"headingText":"02 - Authoring Quarto","headingAttr":{"id":"","classes":[],"keyvalue":[["background-color","#447099"],["background-image","images/typewriter.jpg"],["background-size","cover"]]},"containsRefs":false,"markdown":"\n\n\n## Quarto, anatomy\n\n1.  Metadata: YAML\n\n2.  Text: Markdown\n\n3.  Code: `knitr` or `jupyter`\n\n. . .\n\nAdd it all together, and you have beautiful, powerful, and useful outputs, all with plain text input!\n\n```{r include=FALSE}\nlibrary(tidyverse)\n```\n\n\n## Literate programming\n\n> Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros. - [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming)\n\n    ---\n    title: \"ggplot2 demo\"\n    date: \"5/22/2021\"\n    format: html\n    ---\n\n    ## Air Quality\n\n    There is a relationship between temperature and the ozone level.\n\n    ```{{r}}\n    #| label: fig-airquality\n    library(ggplot2)\n    ggplot(airquality, aes(Temp, Ozone)) + \n      geom_point() + \n      geom_smooth(method = \"loess\"\n    )\n    ```\n\n. . .\n\n::: {style=\"background: #a13c6530; width: 400px; height: 145px; margin: 5px; position: absolute; top: 245px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #fa551c30; width: 900px; height: 110px; margin: 5px; position: absolute; top: 405px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #6a9c4230; width: 550px; height: 210px; margin: 5px; position: absolute; top: 520px; left: 0px;\"}\n:::\n\n# 1 Metadata {background-color=\"#a13c65\"}\n\n## Metadata: YAML\n\n\"Yet Another Markup Language\" or \"YAML Ain't Markup Language\"\n\n``` yaml\n---\nkey: value\n---\n```\n\n## Output Options\n\n``` yaml\n---\nformat: something\n---\n```\n\n. . .\n\n``` yaml\n---\nformat: html\n---\n```\n\n``` yaml\n---\nformat: pdf\n---\n```\n\n``` yaml\n---\nformat: revealjs\n---\n```\n\n. . .\n\nThen add option arguments!\n\n``` yaml\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n```\n\n. . .\n\nSub-options should be below the main format output and spacing matters!\n\n``` yaml\n---\nformat: \n  html:\n    option1: \"text\"\n    option2: logical\n    option3:\n      - sub-option\n      - sub-option\n    option4: [sub-option1, sub-option2]\n---\n```\n\n## Why YAML?\n\nTo avoid manually typing out all the options, every time!\n\n. . .\n\n::: {style=\"font-size: 70px;\"}\n```{.bash filename=\"terminal\"}\nquarto render document.qmd --to html\n```\n:::\n\n<br>\n\n. . .\n\n::: {style=\"font-size: 70px;\"}\n```{.bash filename=\"terminal\"}\nquarto render document.qmd --to html -M code fold:true\n```\n:::\n\n<br>\n\n. . .\n\n::: {style=\"font-size: 70px;\"}\n```{.bash filename=\"terminal\"}\nquarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3\n```\n:::\n\n# Demo: Navigating within RStudio {background-color=\"black\"}\n\n## Quarto workflow\n\nExecuting the Quarto Render button in RStudio will call Quarto render in a background job - this will prevent Quarto rendering from cluttering up the R console, and gives you and easy way to stop.\n\n![](images/background-job.png)\n\n## Rendering\n\n1. Render in RStudio, starts a background job and previews the output  \n\n![](https://quarto.org/docs/tools/images/rstudio-render.png){width=\"600\" fig-alt=\"A screenshot of the RStudio Render button, a blue arrow facing to the right with the text 'Render' next to it\"}\n\n. . .\n\n2. System shell via `quarto render`\n\n::: {style=\"font-size: 70px;\"}\n\n```{.bash filename=\"terminal\"}\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n\n:::\n\n. . .\n\n3. R console via `quarto` R package\n\n::: {style=\"font-size: 70px;\"}\n```{r}\n#| eval: false\n#| echo: true\nlibrary(quarto)\nquarto_render(\"document.qmd\") # defaults to html\nquarto_render(\"document.qmd\", output_format = \"pdf\")\n```\n\n:::\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open RStudio and `quarto-workshop/03-computation/visual-editor.qmd`\n- Compare behavior of rendering from RStudio > Render, using the CLI with `quarto render`, and in R console via `quarto::quarto_render()`\n\n## Quarto linting\n\n> Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs. - [Lint](https://en.wikipedia.org/wiki/Lint_(software)#:~:text=Lint%2C%20or%20a%20linter%2C%20is,examined%20C%20language%20source%20code.)\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/lint-rstudio.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/lint-vscode.png)\n:::\n:::\n\n## Quarto YAML Intelligence\n\nRStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.\n\n:::: {.columns}\n\n::: {.column .fragment}\n\n![](images/yaml-autocomplete.gif)\n\n:::\n\n::: {.column .fragment}\n\n![](images/knitr-autocomplete.gif)\n\n:::\n\n::::\n\n# Single source publishing\n\n## Divs and Spans\n\nPandoc and therefore Quarto can parse [\"fenced `Div` blocks\"](https://pandoc.org/MANUAL.html#divs-and-spans)\n\n. . .\n\n```css\n.big-text {\n  font-size: 120px;\n}\n```\n\n```markdown\n::: {.big-text}\nA paragraph with big text.\n:::\n```\n\n. . .\n\n```{css, echo=FALSE}\n.big-text {\n  font-size: 100px;\n}\n```\n\n::: {.big-text}\nA paragraph with big text.\n:::\n\n. . .\n\n```code\nThis is text with [special]{style=\"color:red;\"} formatting.\n```\n\n. . .\n\nThis is text with [special]{style=\"color:red;\"} formatting.\n\n## Divs and spans\n\nA fenced div always starts and ends with equal/matching `:::`:\n\n:::: {.columns}\n\n::: {.column .fragment}\nMinimum and typical `:::`\n```code\n::: <- Starts\nContent\n::: <- Ends\n```\n:::\n\n::: {.column .fragment}\n\nAny number can be used: `::::::`\n\n```code\n:::::: <- Starts\nContent\n:::::: <- Ends\n\n```\n\n:::\n\n::::\n\n. . .\n\nYou can also _nest_ fenced div, just make sure to match start -> end\n\n```code\n\n:::: {.columns}\n::: {.column}\ncontent\n:::\n\n::: {.column}\ncontent 2\n:::\n::::\n\n```\n\n## Why `:::` instead of `<div>`\n\nYou're not limited to HTML/CSS concepts - Pandoc and Quarto also have \"attributes\" that can be assigned in this way.\n\n. . .\n\n-   You can think of a `:::` div as a HTML `<div>` but it can also apply in specific situations to content in PDF or other formats (Word, Powerpoint, etc)\n-   Similarly, `[text]{.class}` spans can be thought of a `<span .class>Text</span>` but again are a bit more transferable if using Pandoc/Quarto native attributes.\n\n. . .\n\nThe following, uses a `:::` to apply a figure layout Quarto class across formats AND applies a span with `{alt-text=\"text\"}`\n\n``` code\n::: {layout-ncol=2}\n\n![Male boston terrier](male-boston-terrier.png){fig-alt=\"An image of a male boston terrier\"}\n\n![Female boston terrier](female-boston-terrier.png){fig-alt=\"An image of a female boston terrier\"}\n\n:::\n```\n\n## Callout Blocks\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including: \n    `note`, `tip`, `warning`, `caution`, and `important`.\n    :::\n\n::: callout-note\n## Note\n\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n::: callout-warning\n## Warning\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n:::\n\n::: callout-important\n## This is important\n\nDanger, callouts will really improve your writing.\n:::\n\n::: callout-tip\n## Tip with caption\n:::\n\n::: callout-caution\n## Caution, under construction\n\nHere is something under construction\n:::\n\n## Callout markdown syntax\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including:\n    `note`, `warning`, `important`, `tip`, and `caution`.\n    :::\n\n\n    :::{.callout-tip}\n    ## Tip With Caption\n\n    This is an example of a callout with a caption.\n    :::\n\n<br> <br>\n\n    :::{.callout-caution collapse=\"true\"}\n    ## Expand To Learn About Collapse\n\n    This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n    :::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `quarto-workshop/02-authoring/callout-boxes.qmd`\n-   Try changing the types of callouts/remove them from code boxes and then render\n-   Open `quarto-workshop/02-authoring/callout-pdf.qmd` and render it as well\n\n## Tabsets\n\nSplit up and flip between sections of a page, alternative to just two columns\n\n```\n::: {.panel-tabset}\n\n## Element 1\n\n## Element 2\n\n:::\n```\n\n## Tabsets\n\n::: {.panel-tabset}\n\n## Code\n\n```{r}\n#| echo: fenced\n#| eval: false\nhead(mtcars)\n```\n\n\n## Output\n\n```{r}\n#| eval: true\n#| echo: false\nhead(mtcars)\n```\n\n:::\n\n## Tabsets\n\n````\n::: {.panel-tabset}\n\n## Code\n\n```{{r}}\n#| echo: fenced\n#| eval: false\nhead(mtcars)\n```\n\n## Output\n\n```{{r}}\n#| eval: true\n#| echo: false\nhead(mtcars)\n```\n\n:::\n````\n\n## Figure layout\n\n- Use a `layout` div: \n  - `::: {layout-ncol=2}` or `::: {layout-nrow=3}`\n  - `::: {layout=\"[[70,30], [100]]\"}`\n  - `::: {layout=\"[[40,-20,40], [100]]\"}`\n  \n## Figure Layout\n\n::: {.columns}\n\n::: {.column}\n\n```\n::: {layout=\"[[40,-20,40], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n```\n:::\n\n::: {.column .fragment}\n\n![](https://quarto.org/docs/authoring/images/layout-attrib-negative.png)\n\n:::\n\n:::\n\n## Spans\n\nWhereas a `:::` fenced div is useful for application across a paragraph of text or set of images, a `[span]{.class}` is useful for application to a single item/string within a sentence.\n\n. . .\n\nMaybe a footnote^[`Maybe a footnote^[This is important text]`]\n\n. . .\n\nOr a magically [appearing word]{.fragment} [with an additional point after]{.fragment}\n\n. . .\n\n```code\nOr a magically [appearing word]{.fragment} [with an additional point after]{.fragment}\n```\n\n# Code {background-color=\"#446b99\"}\n\n## Choose your engine\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nIf no engine specified, Quarto will use whatever language is found first (R = knitr, Python/Julia = Jupyter)\n\n```yaml\n---\nformat: html\n---\n```\n\n<br>\n\nYou can force using `knitr` if you're mixing R/Python content via `reticulate` or if your first code chunk is not R but you want to use R.\n\n```yaml\n---\nformat: html\nengine: knitr\n---\n```\n\n:::\n\n::: {.column width=\"50%\" .fragment}\n\nYou can specify Jupyter to use defaults\n\n```yaml\n---\nengine: jupyter\n---\n```\n\n<br>\n\nOr a specific Python version\n\n```yaml\n---\nengine: python3\n---\n```\n\n<br>\n\nOr even a specific Jupyter Kernel!\n\n```yaml\n---\njupyter: \n  kernelspec:\n    name: \"venvPython\"\n    language: \"python\"\n    display_name: \"Python 3.7 (venv Python)\"\n---\n```\n\n:::\n\n::::\n\n## `knitr` code cells\n\nThere's a lot of `knitr` options!\n\n- See Quarto specific `knitr` details at: [https://quarto.org/docs/reference/cells/cells-knitr.html](https://quarto.org/docs/reference/cells/cells-knitr.html)\n- `knitr` overview in total: <https://yihui.org/knitr/>\n- Jupyter specific chunk options: <https://quarto.org/docs/reference/cells/cells-jupyter.html>\n\n## Anatomy of a code chunk\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: car-cyl\n#| echo: false\nmtcars %>% \n  distinct(cyl)\n```\n````\n\n:::\n\n::: {.column width=\"50%\"}\n\n- Has 3x backticks on each end ```` ``` ````  \n- Place engine (`r`) between curly braces `{r}`  \n- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  \n\n:::\n\n::::\n\n\n## Code\n\n```{r}\n# label: example-code-introduction\n#| echo: fenced\n#| output-location: column\n#| label: fig-airquality\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\"\n)\n```\n\n## Code, more than just R\n\n::: columns\n\n::: {.column width=\"50%\"}\n\n```{python}\n#| label: fig-polar\n#| echo: fenced\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](images/polar-axis.png){width=\"650px\"}\n\n:::\n\n:::\n\n## Create code chunks\n\n- You can manually type out code chunks: ```` ```{r} ````\n- the keyboard shortcut <kbd>`Ctrl + Alt + I`</kbd> (OS X: <kbd>`Cmd + Option + I`</kbd>)\n- the Add Chunk command in the editor toolbar\n\n. . .\n\nOr use the Command Palette: <kbd>`Cmd + Shift + P`</kbd>/<kbd>`Ctrl + Shift + P`</kbd>\n\n## Code chunks options\n\nAll code chunk options at [yihui.org/knitr/options/](https://yihui.org/knitr/options/)\n\n. . .\n\nIf you've used RMarkdown before, you're likely used to syntax like:\n\n```` ```{r chunk-label, option=TRUE} ````\n\n. . .\n\n```{r, echo = \"fenced\", eval = TRUE}\nmtcars %>% filter(mpg >= 25)\n```\n\n. . .\n\nQuarto introduces the \"hash pipe\" in `#|`  - this is the preferred syntax, although Quarto is backwards compatible with the older RMarkdown syntax.\n\n```{r}\n#| echo: fenced\n#| eval: true\n#| code-line-numbers: \"|2-3\"\nmtcars %>% filter(mpg >= 25)\n```\n\n## Quarto's hash pipe `#|`\n\n![](images/hash-pipe.gif){width=\"800px\" fig-alt=\"Gif of Weezer's lead singer singing into a microphone saying 'I've got my hashpipe'\"}\n\n[Weezer - Hash Pipe](https://www.youtube.com/watch?v=_9BGLtqqkVI)\n\n## Why Quarto + `#|`?\n\n1. Consistency across engine (Jupyter/knitr)\n1. Consistency across YAML/Chunk/`:::` options - decrease mental burden when learning/remembering\n1. More control over order/spacing of chunk options - not limited to one running line of options!\n\n## Quarto chunk options\n\n```{r}\n#| echo: fenced\n#| code-line-numbers: \"|3-8\"\n#| warning: false\n#| fig-cap: \"Air Quality\"\n#| fig-align: left\n#| fig-alt: |\n#|   \"A scatterplot with temperature by ozone levels along with a trend line \n#|   indicating the increase in temperature with increasing ozone levels.\"\n\nlibrary(ggplot2)\nggplot(airquality, aes(Ozone, Temp)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n## Code in chunk option\n\nYou can also execute code inside a chunk option via the `!expr` syntax:\n\n```{r}\n#| echo: fenced\n#| code-line-numbers: \"|3\"\n#| fig-cap: !expr glue::glue(\"The mean temperature was {mean(airquality$Temp) |> round()}\")\n#| fig-alt: |\n#|   \"A scatterplot with temperature by ozone levels along with a trend line \n#|   indicating the increase in temperature with increasing ozone levels.\"\nggplot(airquality, aes(Ozone, Temp)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n\n```\n\n## Quarto and RMarkdown\n\n- Basic RMarkdown documents that render to static HTML and PDF are the most transferable directly to Quarto\n\n. . .\n\n:::: columns\n\n::: {.column width=\"50%\"}\n\n### R Markdown\n\n```yaml\ntitle: \"My Document\"\noutput:\n  html_document:\n    toc: true\n    number_sections: true\n    css: styles.css\n```    \n:::\n\n::: {.column width=\"50%\"}\n\n### Quarto\n\n```yaml\ntitle: \"My Document\"\nformat:\n  html:\n    toc: true\n    number-sections: true\n    css: styles.css\n```\n\n:::\n\n::::\n\n. . .\n\n<br>\n\nNote that the YAML for Quarto:  \n\n- Will follow a `word-word` syntax  \n- Instead of using `output: html_document`, you'll use `format: html`  \n\n> One source of the difference in syntax is that Quarto is more closely aligned with Pandoc format names and options (thus the use of - as a word separator rather than _).\n\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `quarto-workshop/04-static/old-rmarkdown.rmd`\n- Render via Quarto CLI\n\n## \n\n### Converting RMarkdown -> Quarto\n\n::: {.incremental}\n\n- Option 1: Change `.rmd` -> `.qmd` - this will ALWAYS use Quarto for rendering\n\n- Option 2: Change YAML's `output: html_document` -> `format: html`  - uses Quarto\n\n:::\n\n. . .\n\n::: {.fragment}\n\n### Converting `knitr` chunks\n\n- [`knitr` dev version](https://github.com/yihui/knitr/issues/2082#issuecomment-1195464246) as of 2022-08-06 has: `knitr::convert_chunk_header(\"doc.qmd\", output = identity)`  \n\n:::\n\n::: {.incremental}\n\n- `knitr::convert_chunk_header()` converts:\n  - `fig.width=1` syntax to \n  - `#| fig-width: 1` \n  - across all code chunks in a entire document  \n\n:::\n\n. . .\n\n<br>\n\nBut again - you don't _have_ to convert syntax of all your old documents, can use `quarto render` at terminal or use R + `quarto::quarto_render()` to render existing RMarkdown docs via Quarto\n\n## Remember the `::: {layout}`?\n\nYou can do similar things with chunk options and plots from code!\n\n. . .\n\n```{r}\n#| echo: fenced\n#| code-line-numbers: \"|4\"\n#| output-location: fragment\n#| layout-ncol: 2\n#| fig-cap: \n#|   - \"Speed and Stopping Distances of Cars\"\n#|   - \"Engine displacement and fuel efficiency in Cars\"\ncars |> \n  ggplot(aes(x = speed, y = dist)) +\n  geom_point()\nmtcars |> \n  ggplot(aes(x = disp, y = mpg)) +\n  geom_point()\n```\n\n## Chunk option layouts\n\n```{r}\n#| echo: fenced\n#| code-line-numbers: \"|7\"\n#| output-location: fragment\n#| fig-cap: \n#|   - \"Speed and Stopping Distances of Cars\"\n#|   - \"Engine displacement and fuel efficiency in Cars\"\n#| layout: \"[[40,-20,40]]\"\n#| fig-height: 4\n#| fig-format: retina\ncars |> \n  ggplot(aes(x = speed, y = dist)) +\n  geom_point()\nmtcars |> \n  ggplot(aes(x = disp, y = mpg)) +\n  geom_point()\n```\n\n# Aesthetics {background-image=\"images/howard-gentleman.jpg\" background-size=\"contain\" background-position=\"right\" background-color=\"black\"}\n\n## HTML Appearance\n\nOut of the box, Quarto's HTML is styled with Bootstrap 5 and opinionated defaults.\n\nBootstrap is the most popular CSS Framework for responsive websites, where v5 is the latest.\n\n. . .\n\nQuarto comes pre-installed with 25 themes from [Bootswatch](https://bootswatch.com/) and you can use them like so:\n\n```yaml\n---\nformat:\n  html:\n    theme: litera\n---\n```\n\n<br>\n\n. . .\n\nOr you can use a theme and further customize components with SCSS/SASS.\n\n```yaml\n---\nformat:\n  html:\n    theme: \n      - litera\n      - custom.scss\n---\n```\n\n## Bootswatch themes\n\n::: {.r-stack}\n\n![](https://quarto.org/docs/websites/images/theme-litera.png){.fragment fig-alt=\"Screenshot of the litera theme for a website\"}\n\n![](https://quarto.org/docs/websites/images/theme-solar.png){.fragment fig-alt=\"Screenshot of the solar theme for a website\"}\n\n![](https://quarto.org/docs/websites/images/theme-morph.png){.fragment fig-alt=\"Screenshot of the morph theme for a website\"}\n\n:::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `quarto-workshop/04-static/bootswatch-themed.qmd` and try out some themes!  \n- 25 bootswatch themes  \n  - <https://quarto.org/docs/output-formats/html-themes.html>  \n  - <https://quarto.org/docs/output-formats/html-themes-more.html>  \n  \n# Presentations {background-color=\"#a13c65\"}\n\n## Embrace `reveal.js`\n\n```yaml\n---\ntitle: \"My first presentation\"\nformat: revealjs\n---\n```\n\n````markdown\n## Slide 1\n\n- Content\n\n## Slide 2\n\n- Content\n\n![](image.png){fig-alt=\"A description of an image\"}\n\n## Slide 3\n\n```{{r}}\n#| echo: false\nggplot(mtcars, aes(x = disp, y = mpg)) +\n  geom_point()\n```\n\n````\n\n## Embrace `reveal.js`\n\n- Create new slides with level 1 or level 2 headers (`## Heading`)\n- Add content/lists/images/code\n\n. . .\n\nUse fenced divs `:::` for columns\n\n:::: {.columns}\n\n::: {.column .fragment}\n\n- Content on the left\n- More content\n- Additional list\n\nA paragraph of text that is important to hold on the left, but it's fun to include below a list.\n\n:::\n\n::: {.column .fragment}\n- Image on the right\n\n![](images/howard-comfy.png){fig-alt=\"A picture of my dog Howard sleeping with his head smushed against the side of the couch\"} \n\n:::\n\n::::\n\n## Columns\n\n```code\n:::: {.columns}\n\n::: {.column .fragment}\n\n- Content on the left\n\n:::\n\n::: {.column .fragment}\n- Image on the right\n\n![](images/howard-comfy.png){fig-alt=\"A picture of my dog Howard sleeping with his head smushed against the side of the couch\"}\n\n:::\n\n::::\n```\n\n# Quarto Projects {background-color=\"#a13c65\"}\n\n## Quarto projects\n\nQuarto projects are directories that provide:\n\n::: {.incremental}\n\n- A way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\n\n- A way to share YAML configuration across multiple documents.\n\n- The ability to redirect output artifacts to another directory.\n\n- The ability to freeze rendered output (i.e. don’t re-execute documents unless they have changed).\n\n- In addition, projects can have special “types” that introduce additional behavior (e.g. websites or books).\n\n:::\n\n## Quarto Projects\n\n- A Quarto Project is at minimal one Quarto document and the `_quarto.yml` file\n\n```{.yaml filename=\"_quarto.yml\"}\nproject:\n  output-dir: _output\n\ntoc: true\nnumber-sections: true\nbibliography: references.bib  \n  \nformat:\n  html:\n    css: styles.css\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\n```\n\n## Quarto Projects\n\n- Books, Websites, Blogs are a Quarto project\n- Want to learn how to build a blog? Join Isabella Velasquez from RStudio in our next Quarto webinar!\n- Add to your calendar: [rstd.io/quarto-blog](rstd.io/quarto-blog)\n\n<iframe width=\"1152\" height=\"648\" src=\"https://www.youtube.com/embed/CVcvXfRyfE0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n"},"formats":{"revealjs":{"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["code-filename"],"css":["theme/theme.css"],"output-file":"02-authoring.html"},"language":{},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.0.37","auto-stretch":true,"editor":"source","slideNumber":true,"width":1600,"height":900,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[jthomasmock.github.io/quarto-r-medicine](https://jthomasmock.github.io/quarto-r-medicine/)","theme":"simple"}}}}