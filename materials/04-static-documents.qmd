---
format: 
  revealjs:
    self-contained: true
    slide-number: c/t
    width: 1920
    height: 1080
    logo: "https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png"
    footer: "[Get started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)"
    css: ["theme/theme.css"]
    theme: simple
    echo: true
editor: source
---

# 04 - Static Quarto Documents {background-image="images/write-something.jpg" background-size="cover" background-color="black" style="font-size: 90px;"}

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#447099",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

## HTML Workhorse

[quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)

## Quarto and RMarkdown

- Basic RMarkdown documents that render to static HTML and PDF are the most transferable directly to Quarto

. . .

:::: columns

::: {.column width="50%"}

### R Markdown

```yaml
title: "My Document"
output:
  html_document:
    toc: true
    number_sections: true
    css: styles.css
```    
:::

::: {.column width="50%"}

### Quarto

```yaml
title: "My Document"
format:
  html:
    toc: true
    number-sections: true
    css: styles.css
```

:::

::::

. . .

<br>

> One source of the difference in syntax is that Quarto is more closely aligned with Pandoc format names and options (thus the use of - as a word separator rather than _).


# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

- Open `materials/workshop/04-static/old-rmarkdown.rmd`
- Render via Quarto CLI

```{R}
#| echo: false
countdown_timer(2)
```

## Static documents

- A static document is your "daily driver" - has the power for a complex table of contents, figure alignment, control of ouptut/code, and other niceties
- Useful as a lab notebook, scratchpad, or the final output for your team

## Table of contents and Sections

Table of contents (ToC) and sections are useful for breaking up longer documents.

- Quarto will automatically build a ToC for level 3 headers and above but you can control this with:

```yaml
toc-depth: 4
```

or 

```yaml
toc-depth: 2
```

. . .

<iframe src = "https://rstudio-conf-2022.github.io/get-started-quarto/materials/static/toc-1.html" height="500" width="1200" ></iframe>


## Table of Contents and Section

<iframe src="https://rstudio-conf-2022.github.io/get-started-quarto/#getting-started-with-quarto" width="1300px" height="900px"></iframe>


## Tabsets

Split up and flip between sections of a page, alternative to just two columns

```
::: {.panel-tabset}

## Element 1

## Element 2

:::
```

## Tabsets

::: {.panel-tabset}

## Code

```{r}
#| echo: fenced
#| eval: false
head(mtcars)
```


## Output

```{r}
#| eval: true
#| echo: false
head(mtcars)
```

:::

## Tabsets

````

::: {.panel-tabset}

## Code

```{{r}}
#| echo: fenced
#| eval: false
head(mtcars)
```


## Output

```{{r}}
#| eval: true
#| echo: false
head(mtcars)
```

:::
````

## Footnotes

You can create inline footnotes like so: `some inline text with a^[footnote]`

. . .

Pandoc also supports numbering and formatting footnotes using the following syntax:

<iframe src="https://rstudio-conf-2022.github.io/get-started-quarto/materials/static/fancy-footnotes.html" height="800" width="1200"></iframe>

## Cross-references

`![Howard is glamorous](images/howard-glamour.jpg){#fig-glamour}`

> The presence of the caption (Howard is glamouros) and label (#fig-howard) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document

. . .

![Howard is glamorous](images/howard-glamour.jpg){#fig-glamour fig-align="left"}

. . .

@fig-glamour is a great glamour shot of Howard

## Reference popups

If you hover your mouse over the citation and footnote in this sentence you’ll see a popup displaying the reference contents:

```
format:
  html:
    citations-hover: true
    footnotes-hover: true
```

. . .

<br>

```
For example, did you know that Howard is a dog^[Specifically he is a Boston Terrier, although sometimes he acts like a cat]?
```

. . .

<iframe src="static/footnote.html" height="600" width = "1000"></iframe>

# Code {background-color="#4f6952"}

## Hide all code

```yaml
format: html
execute:
  echo: false
```

. . .

Turn back on at individual code-block level:

```r
#| echo: true
```

## Fold code

```yaml
format:
  html:
    code-fold: true
    code-summary: "Hidden code"
```

. . .

Turn on at individual code-block level:

```r
#| code-fold: true
#| code-summary: "Hidden code"
```

## Code tools

```yaml
format:
  html:
    code-fold: true
    code-tools: true
```

. . .

![](https://quarto.org/docs/output-formats/images/code-tools-01.png)

## Code tools, source

> For example, here we specify that we want only “View Source” (no toggling of code visibility) and no caption on the code menu:

```yaml
format:
  html: 
    code-tools:
      source: true
      toggle: false
      caption: none
```

. . .

![](https://quarto.org/docs/output-formats/images/code-tools-source.png)

## Code tools, source repo

In some situations (especially for longer documents), you may prefer to send viewers to the source code on a version-control website rather than the built in viewer.

. . .

```yaml
format:
  html: 
    code-tools:
      source: https://github.com/quarto-dev/quarto-web/blob/main/index.md
```

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

- Open `materials/workshop/04-static/penguin-report.qmd`
- Explore the document as a concept of literate programming or a "lab notebook"
- Change the code to all fold, render
- Change the code to source and toggle

```{R}
#| echo: false
countdown_timer(4)
```

# Code appearance {background-color="#4f6952"}

## Code highlighting

[Full highlighting options](https://quarto.org/docs/output-formats/html-code.html#highlighting)

```{r}
#| message: false
library(dplyr)
mtcars |> 
  group_by(cyl, am) |> 
  summarize(mean = mean(mpg), n = n(), .groups = "drop")
```

## Code highlighting

```yaml
format: 
  html:
    highlight-style: dracula
    code-block-border-left: "#4f6952"
```

![](images/dracula.png)

## Code highlighting

```yaml
format: 
  html:
    highlight-style: github
    code-block-border-left: "#4f6952"
    code-block-bg: true
```

![](images/github.png)

## Code linking with [`downlit`](https://downlit.r-lib.org/)

> The goal of `downlit` is to provide syntax highlighting and automatic linking of R code

```yaml
format:
  html:
    code-link: true
```

# Aesthetics {background-image="images/howard-gentleman.jpg" background-size="contain" background-position="right" background-color="black"}

## HTML Appearance

Out of the box, Quarto is styled with Bootstrap 5 and opinionated defaults.

Bootstrap is the most popular CSS Framework for responsive websites, where v5 is the latest.

. . .

Quarto comes pre-installed with 25 themes from [Bootswatch](https://bootswatch.com/) and you can use them like so:

```yaml
---
format:
  html:
    theme: litera
---
```

<br>

. . .

Or you can customize a theme with CSS/SCSS/SASS.

```yaml
---
format:
  html:
    theme: 
      - litera
      - custom.scss
---
```

## Bootswatch themes

<iframe src="https://bootswatch.com/" height="900" width="1200"></iframe>

## Bootswatch: lumen

<iframe src="https://bootswatch.com/lumen/" height="900" width="1200"></iframe>

## Bootswatch: litera

<iframe src="https://bootswatch.com/litera/" height="900" width="1200"></iframe>

## Bootswatch: flatly

<iframe src="https://bootswatch.com/flatly/" height="900" width="1200"></iframe>

## Bootswatch: sketchy

<iframe src="https://bootswatch.com/sketchy/" height="900" width="1200"></iframe>

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

- Open `materials/workshop/04-static/bootswatch-themed.qmd` and try out some themes!
- 25 bootswatch themes
- https://quarto.org/docs/output-formats/html-themes.html
- https://quarto.org/docs/output-formats/html-themes-more.html

```{R}
#| echo: false
countdown_timer(2)
```

## CSS

CSS = Cascading Style Sheets:

> CSS is a language for specifying how documents are presented to users — how they are styled, laid out, etc [mdn web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/What_is_CSS)

. . .

HTML structures the page, CSS styles it

. . .

```html
<div style="color: red; font-size: 100px;">Some text</div>
```

. . .

<div style="color: red; font-size: 35px;">Some text</div>

. . .

CSS can also bring in additional resources, like new fonts!

```{css}
@import url('https://fonts.googleapis.com/css2?family=Fira+Mono&display=swap');
```


## Inline css

```
:::{style="color: white; font-size: 150px; background-color:#d3d3d3;"}
Text
:::
```

. . .

:::{style="color: white; font-size: 150px; background-color:#d3d3d3;"}
Text
:::

. . .

```
Some text with [dplyr code]{style="font-family: 'Fira Mono !important'; background-color:#d3d3d3;"} and more text.
```

. . .

Some text with [code]{style="font-family: 'Fira Mono'; background-color:#d3d3d3;"} and more text.

## CSS Class

```{css}
.big-text {
  font-size: 150px;
  color: blue;
}
```

```
::: {.big-text}
- Big text
- Still big
:::

- Smol text
```

::: {.big-text}
- Big text
- Still big
:::

- Smol text

## Class + spans

```
Here is some [big text]{.big-text} and some small text.
```

Here is some [big text]{.big-text} and some small text.

## CSS Id

```{css}
#blue {
  background-color: #3c6f9a;
  color: #fa551b;
}
```

. . .

```markdown
::: {#blue}
Some content
:::
```

::: {#blue}
Some content
:::

. . .

```markdown
Some [text]{#blue}
```

Some [text]{#blue}

## SCSS/SASS

> SASS (Syntactically Awesome Style Sheets) is a pre-processor scripting language that will be compiled or interpreted into CSS. SassScript is itself a scripting language whereas SCSS is the main syntax for the SASS which builds on top of the existing CSS syntax

. . .

Sass reduces repetition of CSS and therefore saves time - think of it like manually changing code vs using functions in R.

. . .

Color palette: [`#404042`]{style="background-color: #404042;"} [`#3c6f9a`]{style="background-color: #3c6f9a;"} [`#fa551b`]{style="background-color: #fa551b;"}

. . .

```css
$primary_1: #a2b9bc;
$primary_2: #b2ad7f;
$primary_3: #878f99;

/* use the variables */
.main-header {
  background-color: $primary_1;
}

.menu-left {
  background-color: $primary_2;
}

.menu-right {
  background-color: $primary_3;
}
```

## SASS variables + Quarto

<iframe src="https://quarto.org/docs/output-formats/html-themes.html#sass-variables" height="800" width="1200" ></iframe>

## `format: PDF`

TIP!
- pandoc divs/spans are generally transferrable
- CSS is _not_ transferable
- Lean on Quarto/Pandoc tooling and then reach for raw CSS/LaTeX

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

- Open `materials/workshop/01-intro/history.qmd`
- Render as HTML and then render as PDF

```{R}
#| echo: false
countdown_timer(3)
```