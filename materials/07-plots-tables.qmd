---
format: 
  revealjs:
    slide-number: true
    width: 1600
    height: 900
    logo: "https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png"
    footer: "[Get started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)"
    css: ["theme/theme.css"]
    theme: simple
    echo: true
editor: source
---

# 07 - Plots, Graphics, and tables {background-color="#4f6952" background-image="images/outdoor-patio.jpg" background-size="cover"}

```{r setup}
#| include: false
library(tidyverse)
library(palmerpenguins)
library(ggiraph)
library(gt)
library(gtExtras)
library(gtsummary)
```

## Layout

    ::: {#fig-dogs layout-ncol=2}

    ![Sleeping](images/boston-sleep.png){#fig-sleep}

    ![Happy](images/boston-terrier.png){#fig-awake}

    The two states of Howard.

    :::

## Layout

::: {#fig-dogs layout-ncol="2"}
![Sleeping](images/boston-sleep.png){#fig-sleep}

![Happy](images/boston-terrier.png){#fig-awake}

The two states of Howard.
:::

## Figure panels

    ::: {layout-ncol=2}
    ![Howard on a couch](images/howard-comfy.png)

    ![Howard in a table](images/howard-table.png)
    :::

## Multiple rows

    ::: {layout-nrow=2}
    ![Howard on a couch](images/howard-comfy.png)

    ![Howard in a table](images/howard-table.png)

    ![Howard sleeping](images/boston-sleep.png)

    ![Howard awake](images/boston-terrier.png)
    :::

## Figure divs

> You can treat any markdown content you want as a figure by enclosing it in Pandoc div block with an identifier prefaced with #fig-. For example, here we create a figure that includes an embedded iframe:

    ::: {#fig-elephant}

    <iframe width="560" height="315" src="https://www.youtube.com/embed/SNggmeilXDQ"></iframe>

    Elephant
    :::

::: {#fig-elephant}
<iframe width="560" height="315" src="https://www.youtube.com/embed/SNggmeilXDQ">

</iframe>

Elephant
:::

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

-   Open `materials/workshop/07-static/figure-layout`
-   Swap between row and col layout

## Custom Layouts

::: columns
::: {.column width="50%"}
Read `[[1,1], [1]]` as:

Row 1: two equal sized images each taking up half of the column

Row 2: one image, taking up the entire column

    ::: {layout="[[1,1], [1]]"}
    ![Howard sleeping](images/boston-sleep.png)

    ![Howard in a table](images/howard-table.png)

    ![Howard on a couch](images/howard-comfy.png)
    :::
:::

::: {.column width="50%"}
![](images/custom-layout-equal.png)
:::
:::

## Custom Layouts

::: columns
::: {.column width="50%"}
Read `"[[70,30], [100]]"` as:

Row 1: two images, taking up 70% and 30% of the column

Row 2: one image, taking up 100% of column

    ::: {layout="[[70,30], [100]]"}

    ![Howard on a couch](images/howard-comfy.png)

    ![Howard sleeping](images/boston-sleep.png)

    ![Howard in a table](images/howard-table.png)
    :::
:::

::: {.column width="50%"}
![](images/custom-layout-70-30.png)
:::
:::

## Custom layouts

::: columns
::: {.column width="50%"}
You can also add negative values for "blank space"

`[[40,-20,40], [100]]`

Row 1: 40% image 1, 20% blank, 40% image 2

Row 2: 100% image 3

    ::: {layout="[[40,-20,40], [100]]"}
    ![Howard on a couch](images/howard-comfy.png)

    ![Howard sleeping](images/boston-sleep.png)

    ![Howard in a table](images/howard-table.png)
    :::
:::

::: {.column width="50%"}
![](images/howard-layout-blankspace.png)
:::
:::

## Custom layouts, vertical

::: columns
::: {.column width="50%"}
If images within a row are of differing heights, you can control vertical alignment.

`{layout="[25,-2,10]" layout-valign="bottom"}`

Row: 25

    ::: {layout="[25,-2,10]" layout-valign="bottom"}
    ![Howard on a couch](images/howard-comfy.png)

    ![Howard in a table](images/howard-table.png)
    :::
:::

::: {.column width="50%"}
![](images/howard-layout-vertical.png)
:::
:::

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

-   Open `materials/workshop/07-visuals/figure-layout2.qmd`

## Figure layout

::: panel-tabset
## Code

```{r}
#| echo: fenced
#| eval: false
#| layout-ncol: 2
#| fig-cap: 
#|   - "Speed and Stopping Distances of Cars"
#|   - "Engine displacement and fuel efficiency in Cars"

cars |> 
  ggplot(aes(x = speed, y = dist)) +
  geom_point()

mtcars |> 
  ggplot(aes(x = disp, y = mpg)) +
  geom_point()
```

## Image

![](images/plot-layout-ncol.jpeg)
:::

## Figure layout, subcaptions

::: panel-tabset
## Code

```{r}
#| echo: fenced
#| eval: false
#| label: fig-charts
#| fig-cap: Charts
#| fig-subcap: 
#|   - "Cars"
#|   - "mtcars"
#| layout-ncol: 2

cars |> 
  ggplot(aes(x = speed, y = dist)) +
  geom_point()

mtcars |> 
  ggplot(aes(x = disp, y = mpg)) +
  geom_point()
```

## Output

![](images/plot-subcaptions.jpeg)
:::

## Figure layout, custom

::: panel-tabset
## Code

```{r}
#| echo: fenced
#| eval: false
#| layout: [[45,-10, 45], [100]]

cars |> 
  ggplot(aes(x = speed, y = dist)) +
  geom_point()

mtcars |> 
  ggplot(aes(x = disp, y = mpg)) +
  geom_point()

mtcars |> 
  ggplot(aes(x = cyl, y = mpg, group = cyl, color = factor(cyl))) +
  geom_boxplot() +
  geom_jitter()
```

## Output

![](images/figure-layout-custom.jpeg)
:::

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

-   Open `materials/workshop/07-visuals/plot-layout.qmd`
-   Explore, try it out and render

## Block layout, arbitrary content

    ::: {layout-ncol=2}
    ## List One

    - Item A
    - Item B
    - Item C

    ## List Two

    - Item X
    - Item Y
    - Item Z
    :::

## Block layout, arbitrary content

::: {layout-ncol="2"}
## List One

-   Item A
-   Item B
-   Item C

## List Two

-   Item X
-   Item Y
-   Item Z
:::

## Block layout, arbitrary content

``` code
::: {layout-ncol=2}
- Item X
- Item Y
- Item Z

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa. 
:::
```

## Block layout, arbitrary content

::: {layout-ncol="2"}
-   Item X
-   Item Y
-   Item Z

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa.

:::

## Grid, custom layout

The "grid" layout in Quarto is 12 units wide - you can break up the grid into different subsections as long as they add up to 12.

::: {.grid}

::: {.g-col-4}
This column takes 1/3 of the page
![](images/boston-terrier.png)
:::

::: {.g-col-8}
This column takes 2/3 of the page
![](images/howard-comfy.png)
:::

:::

. . .

```code
::: {.grid}

::: {.g-col-4}
This column takes 1/3 of the page
![](boston-terrier.png)
:::

::: {.g-col-8}
This column takes 2/3 of the page
![](boston-sleep.png)
:::

:::
```

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}
- Try out the grid layout in the previous slide, modifying the `.g-col-8` to add up to a total of 12
- Create a new Quarto doc


## Article Layout

Quarto supports a variety of page layout options that enable you to author content that:

-   Fills the main content region `.column-body`
-   Overflows the content region `.column-body-outset`
-   Spans the entire page `.column-page`
-   Occupies the document margin `.column-margin`

. . .

Put it in a div, and assign a specific class

``` code
:::{.column-body-outset}
Outset content...
:::
```

``` code
:::{.column-margin}
Margin/aside figure
:::
```

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

-   Open `materials/workshop/07-visuals/plots.qmd`
-   Try modifying the layout with `::: {.column-???}` syntax

## `ggplot2`

```{r}
library(palmerpenguins)
library(ggplot2)
ggplot2::theme_set(ggplot2::theme_minimal())
penguins <- na.omit(penguins)
```

## `ggplot2`

```{r}
#| echo: true
mass_flipper <- ggplot(data = penguins, 
                       aes(x = flipper_length_mm,
                           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin size, Palmer Station LTER",
       subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
       x = "Flipper length (mm)",
       y = "Body mass (g)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme(legend.position = c(0.2, 0.7),
        plot.title.position = "plot",
        plot.caption = element_text(hjust = 0, face= "italic"),
        plot.caption.position = "plot")
```

## `ggplot2`

```{r}
mass_flipper
```

## `ggplot2`

```{r}
#| echo: fenced
#| fig-height: 2
mass_flipper
```

## `ggplot2`

```{r}
#| echo: fenced
#| fig-height: 4
#| fig-dpi: 600
mass_flipper
```

## `ggplot2`

```{r}
#| echo: fenced
#| fig-height: 10
#| fig-dpi: 600
mass_flipper
```

## `ggplot2`

```{r}
#| echo: fenced
#| fig-height: 10
#| fig-width: 16
#| fig-dpi: 400
mass_flipper
```

## `ggplot2`

```{r}
#| echo: fenced
#| fig-align: center
mass_flipper
```

## Interactivity

Quarto supports JupyterWidgets (with Jupyter) or `htmlwidgets` in R/knitr

```{r}
library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=-77.0168, lat=38.7814, popup="You are here - in Maryland!")
```

## Observable.js

> Quarto includes native support for Observable JS, a set of enhancements to vanilla JavaScript created by Mike Bostock (also the author of D3). Observable JS is distinguished by its reactive runtime, which is especially well suited for interactive data exploration and analysis.

```{ojs}
//| panel: input
//| echo: false
viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe"], 
    label: "Islands:"
  }
)
```

::: panel-tabset
## Plot

```{ojs}
//| echo: false
Plot.rectY(filtered, 
  Plot.binX(
    {y: "count"}, 
    {x: "body_mass", fill: "species", thresholds: 20}
  ))
  .plot({
    facet: {
      data: filtered,
      x: "sex",
      y: "species",
      marginRight: 80
    },
    marks: [
      Plot.frame(),
    ]
  }
)
```

## Data

```{ojs}
//| echo: false
Inputs.table(filtered)
```
:::

```{ojs}
//| echo: false
data = FileAttachment("palmer-penguins.csv").csv({ typed: true })
```

```{ojs}
//| echo: false
filtered = data.filter(function(penguin) {
  return bill_length_min < penguin.bill_length &&
         islands.includes(penguin.island);
})
```

## `ggiraph`

Example from [Claus Wilke](https://github.com/wilkelab/SDS375/blob/31609013bf4a4c0f34f991fa32474b8371f8873b/worksheets/interactive-plots.Rmd#L484-L514)

```{r}
library(tidyverse)
library(sf)
library(ggiraph)
library(glue)
library(cowplot)

texas_income <- readRDS(url("https://wilkelab.org/SDS375/datasets/Texas_income.rds")) %>%
  select(-county)
US_census <- read_csv("https://wilkelab.org/SDS375/datasets/US_census.csv")
tx_census <- US_census %>% 
  filter(state == "Texas") %>%
  select(FIPS, name, pop2010, area) %>%
  extract(name, "county", regex = "(.+) County") %>%
  mutate(
    FIPS = as.character(FIPS),
    popratio = pop2010/median(pop2010),
  )
texas_counties <- left_join(texas_income, tx_census, by = "FIPS")
```

## `ggiraph`

```{r}
texas_scatter <- texas_counties %>%
  ggplot(aes(pop2010, median_income)) +
  geom_point_interactive(
    aes(
      tooltip = county,
      data_id = county
    ),
    na.rm = TRUE, size = 3
  ) +
  scale_x_log10() +
  theme_bw()
# then make the map
texas_county_map <- texas_counties %>%
  ggplot() +
  geom_sf_interactive(
    aes(
      tooltip = county,
      data_id = county
    ),
    size = 0.2, color = "black"
  ) +
  theme_void()
```

```{r}
#| eval: false
girafe(
  ggobj = plot_grid(texas_scatter, texas_county_map),
  width_svg = 6,
  height_svg = 3
)
```

## `ggiraph`

```{r}
#| echo: false
girafe(
  ggobj = plot_grid(texas_scatter, texas_county_map),
  width_svg = 6,
  height_svg = 3
)
```

# Tables {background-image="images/outdoor-patio.jpg" background-size="cover" background-color="black"}

## `gt` + `gtExtras`

> With the gt package, anyone can make wonderful-looking tables using the R programming language. The gt philosophy: we can construct a wide variety of useful tables with a cohesive set of table parts. These include the table header, the stub, the column labels and spanner column labels, the table body, and the table footer.

. . .

![](https://gt.rstudio.com/reference/figures/gt_workflow_diagram.svg){width="1800px" fig-align="center"}

# `gt`, a Grammar of Tables

![](https://gt.rstudio.com/reference/figures/gt_parts_of_a_table.svg){.r-stretch fig-align="center"}

## `gt`

```{r}
library(dplyr, warn.conflicts = FALSE)
library(gt)
library(gtExtras)
library(gtsummary)

head(mtcars) |> 
  gt() |> 
  tab_options(
    table.font.size = px(40), #< because I've made the slides a lot bigger
    column_labels.font.size = px(45) #< normally don't have to increase this
  )
```

## `gt` extension packages

::: {.columns}
::: {.column .fragment}

### `gtExtras`

![](https://jthomasmock.github.io/gtExtras/logo.png){style="width: 200px;"}

-   `gtExtras` provides additional helper functions to `gt`, mainly themes and inline plotting
:::

::: {.column .fragment}

### `gtsummary`

![](https://www.danieldsjoberg.com/gtsummary/reference/figures/logo.png){style="width: 220px;"}

-   `gtsummary` extends `gt` to descriptive statistics and statistical summaries of models
:::
:::

## `gtsummary`

-   Comes with built in example datasets like `trial`

```{r}
trial2 <- trial %>% dplyr::select(trt, age, grade)
dplyr::glimpse(trial2)
```

. . .

```{r}
#| fig-align: left
trial2 %>% tbl_summary(by = trt) %>% add_p()
```

## Create a summary

```{r}
penguins <- palmerpenguins::penguins

penguin_sum <- penguins |>
  na.omit() |>
  group_by(species, sex) |>
  summarise(
    n = n(),
    bill_len = mean(bill_length_mm),
    plt_bill = list(bill_length_mm),
    mass = mean(body_mass_g),
    plt_mass = list(body_mass_g),
    .groups = "drop"
  ) |> 
  arrange(species, desc(bill_len))

penguin_sum
```

## `gtExtras`

```{r}
#| echo: fenced
#| output-location: slide
#| fig-width: 10
gt(penguin_sum) |>
  gt_plt_dist(
    plt_bill, 
    line_color = "#447099", 
    fill = "#75aadb",
    fig_dim = c(15, 50)
    ) |> 
  gt_plt_dist(
    plt_mass, 
    line_color = "#447099", 
    fill = "#75aadb"
    ) |> 
  gt_add_divider(
    c(bill_len, mass), "left", 
    weight = px(1), color = "#d3d3d3"
    ) |> 
  cols_align("left", species) |> 
  text_transform(
    cells_body(sex),
    fn = function(x){
      sex_planet <- ifelse(x == "male", "mars", "venus")
      
      purrr::map(
        sex_planet, 
        ~fontawesome::fa(
          .x, height = "45px",
          fill = ifelse(.x =="mars", "#7fbf7b", "#af8dc3")))
                 }) |>
  gt_theme_nytimes() |>
  tab_options(data_row.padding = px(2),
              table.font.size = px(40),
              column_labels.font.size = px(35))
```

## `gtExtras`

Original: <https://twitter.com/thomas_mock/status/1442541043019390982?s=20&t=0JewnMHkYrfPrYosfE2XIg>

```{r}
party_df <- tibble(
  Party = c("SPD", "CDU/CSU", "Greens", "FDP", "AfD", "Left", "Other"),
  Seats = c(206, 196, 118, 92, 83, 39, 1),
  `% of 2nd Votes` = c(25.7, 24.1, 14.8, 11.5, 10.3, 4.9, 8.7)
)

minimal_table <- gt(party_df) %>% 
  gtExtras::gt_plt_dot(column = Seats, category_column = Party,  max_value = 379,
    palette = c("#ec323f", "black", "#63d64a", "#fff24e", "#4fabf7", "#e956ad", "grey")) %>% 
  gtExtras::gt_theme_nytimes() %>% 
  gt::tab_header(title = "Results by Party in the Bundestag Election",
             subtitle = "Seats and votes are based on provisional official results.") %>% 
  gt::cols_width(Party ~ px(300), 3 ~ px(30))
```

## `gtExtras`

![](https://user-images.githubusercontent.com/29187501/134953142-b3175f33-53f2-4e3d-aa5f-9509834263ee.png)

# `r fontawesome::fa("laptop-code", "white")` Your Turn {background-color="#447099" transition="slide-in"}

-   Open `materials/workshop/07-static/gt-summary.qmd`
-   Open `materials/workshop/07-static/stat-html.qmd`
-   Explore and render
